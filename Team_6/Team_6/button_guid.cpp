//=============================================================================
//
// 操作説明ボタン [button_guid.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "sound.h"
#include "button_guid.h"
#include "texture.h"
#include "resource_manager.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************

//=============================================================================
// コンストラクタ
//=============================================================================
CGuidButton::CGuidButton()
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CGuidButton::~CGuidButton()
{
}

//=============================================================================
// 生成処理関数呼び出し
//=============================================================================
CGuidButton * CGuidButton::Create(D3DXVECTOR3 Position, D3DXVECTOR3 SIze)
{
	//操作説明ボタンのポインタ
	CGuidButton * pGuidButton = nullptr;
	//操作説明ボタンのポインタがnullptrの場合
	if (pGuidButton == nullptr)
	{
		//操作説明ボタンのメモリ確保
		pGuidButton = new CGuidButton;
		//操作説明ボタンのポインタがnullptrではない場合
		if (pGuidButton != nullptr)
		{
			//操作説明ボタンの初期化処理関数呼び出し
			pGuidButton->Init(Position, SIze);
		}
	}
	//操作説明ボタンのポインタを返す
	return pGuidButton;
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CGuidButton::Init(D3DXVECTOR3 Position, D3DXVECTOR3 Size)
{
	CButton::Init(Position, Size);
	// テクスチャの設定
	CTexture *pTexture = CManager::GetResourceManager()->GetTextureClass();
	BindTexture(pTexture->GetTexture(CTexture::TEXTURE_NUM_BUTTON_GUID));
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CGuidButton::Uninit(void)
{
	//ボタンの終了処理関数呼び出し
	CButton::Uninit();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CGuidButton::Update(void)
{
	//ボタンの更新処理関数呼び出し
	CButton::Update();
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CGuidButton::Draw(void)
{
	//ボタンの描画処理関数呼び出し
	CButton::Draw();
}

//=============================================================================
// プレス処理関数
//=============================================================================
void CGuidButton::Press(void)
{
}