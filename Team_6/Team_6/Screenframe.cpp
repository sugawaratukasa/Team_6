//=============================================================================
//
// 画面分割UI処理 [screenframe.cpp]
// Author : 樋宮 匠
//
//=============================================================================

//*****************************************************************************
// インクルードファイル
//*****************************************************************************
#include "Screenframe.h"

//*****************************************************************************
// 静的メンバ変数宣言
//*****************************************************************************
LPDIRECT3DTEXTURE9 CScreenFrame::m_pTexture = NULL;

//=============================================================================
// コンストラクタ
//=============================================================================
CScreenFrame::CScreenFrame()
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CScreenFrame::~CScreenFrame()
{
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CScreenFrame::Init(void)
{
	CScene2D::Init(D3DXVECTOR3(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, 0.0f), D3DXVECTOR3(SCREEN_WIDTH, SCREEN_HEIGHT, 0.0f));

	// テクスチャの設定
	CTexture *pTexture = CManager::GetResourceManager()->GetTextureClass();
	BindTexture(pTexture->GetTexture(CTexture::TETXTURE_NUM_SCREENFRAME));

	return S_OK;
}

//=============================================================================
// 更新処理
//=============================================================================
void CScreenFrame::Update(void)
{
	CScene2D::Update();
}

//=============================================================================
// 描画処理
//=============================================================================
void CScreenFrame::Draw(void)
{
	CScene2D::Draw();
}

//=============================================================================
// 終了処理
//=============================================================================
void CScreenFrame::Uninit(void)
{
	CScene2D::Uninit();
}

//=============================================================================
// インスタンス生成処理
//=============================================================================
CScreenFrame * CScreenFrame::Create(void)
{
	CScreenFrame *pFrame;
	pFrame = new CScreenFrame;
	pFrame->Init();

	return pFrame;
}
