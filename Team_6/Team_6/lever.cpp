//=============================================================================
// 牢屋の判定 [prison_door_collision.cpp]
// Author : Sugawara Tsukasa
//=============================================================================
//=============================================================================
// インクルードファイル
// Author : Sugawara Tsukasa
//=============================================================================
#include "manager.h"
#include "resource_manager.h"
#include "lever.h"
#include "lever_body.h"
#include "lever_handle.h"
//=============================================================================
// マクロ定義
// Author : Sugawara Tsukasa
//=============================================================================
#define COLLISION_SIZE	(D3DXVECTOR3(120.0f,450.0f,120.0f))	// サイズ
//=============================================================================
// コンストラクタ
// Author : Sugawara Tsukasa
//=============================================================================
CLever::CLever(PRIORITY Priority) : CDoor_Collision(Priority)
{
	m_pDoor = nullptr;
}
//=============================================================================
// インクルードファイル
// Author : Sugawara Tsukasa
//=============================================================================
CLever::~CLever()
{
}
//=============================================================================
// インクルードファイル
// Author : Sugawara Tsukasa
//=============================================================================
CLever * CLever::Create(D3DXVECTOR3 pos, D3DXVECTOR3 rot)
{
	// CLeverのポインタ
	CLever *pLever = nullptr;

	// nullcheck
	if (pLever == nullptr)
	{
		// メモリ確保
		pLever = new CLever;

		// !nullcheck
		if (pLever != nullptr)
		{
			// 初期化処理
			pLever->Init(pos, rot);

			// ポインタを代入
			//pLever->SetpDoor(pDoor);
		}
	}
	// ポインタを返す
	return pLever;
}
//=============================================================================
// 初期化処理関数
// Author : Sugawara Tsukasa
//=============================================================================
HRESULT CLever::Init(D3DXVECTOR3 pos, D3DXVECTOR3 rot)
{
	// 初期化処理
	CDoor_Collision::Init(pos, rot);

	// レバー生成処理
	LeverCrate(pos, rot);

	// タイプ設定
	SetType(TYPE_ELECTRICAL_ROOM);

	//SetSize(COLLISION_SIZE);
	return S_OK;
}
//=============================================================================
// 終了処理関数
// Author : Sugawara Tsukasa
//=============================================================================
void CLever::Uninit(void)
{
	// 終了処理
	CDoor_Collision::Uninit();
}
//=============================================================================
// 更新処理関数
// Author : Sugawara Tsukasa
//=============================================================================
void CLever::Update(void)
{
	// 更新処理
	CDoor_Collision::Update();
}
//=============================================================================
// 描画処理関数
// Author : Sugawara Tsukasa
//=============================================================================
void CLever::Draw(void)
{
}
//=============================================================================
// レバー生成処理関数
// Author : Sugawara Tsukasa
//=============================================================================
void CLever::LeverCrate(D3DXVECTOR3 pos, D3DXVECTOR3 rot)
{
	// レバーハンドル生成
	m_pLever_Handle = CLever_Handle::Create(pos, rot);

	// レバーハンドルボディ生成
	CLever_Body::Create(pos, rot);
}
//=============================================================================
// レバーを下げる処理関数
// Author : Sugawara Tsukasa
//=============================================================================
void CLever::DownLever(void)
{
}
