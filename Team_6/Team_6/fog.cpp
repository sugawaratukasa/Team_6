//=============================================================================
//
// フォグヘッダー [fog.h]
// Author : Himiys Sho
//
//=============================================================================

//=========================================================================
// インクルード
//=========================================================================
#include "fog.h"
#include "renderer.h"
#include "manager.h"
#include "scene3d.h"

//=======================================================================================
// マクロ定義
//=======================================================================================
#define FOG_START 1.0f;
#define FOG_END   2000.0f

//=======================================================================================
// コンストラクタ
//=======================================================================================
CFog::CFog()
{
}

//=======================================================================================
// デストラクタ
//=======================================================================================
CFog::~CFog()
{
}

//=======================================================================================
// 初期化処理
//=======================================================================================
HRESULT CFog::Init(void)
{
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = CManager::GetRenderer()->GetDevice();

	// フォグ有効化
	pDevice->SetRenderState(D3DRS_FOGENABLE, TRUE);

	// フォグカラー設定
	pDevice->SetRenderState(D3DRS_FOGCOLOR, D3DXCOLOR(1.0f, 0.0f, 0.0f, 1.0f));
	// バーテックスフォグ(線形公式)を使用
	pDevice->SetRenderState(D3DRS_FOGVERTEXMODE, D3DFOG_LINEAR);
	// 範囲ベースのフォグを使用
	pDevice->SetRenderState(D3DRS_RANGEFOGENABLE, TRUE);

	float fStart = FOG_START;
	float fEnd = FOG_END;
	// フォグ範囲設定
	pDevice->SetRenderState(D3DRS_FOGSTART, *((LPDWORD)(&fStart)));
	pDevice->SetRenderState(D3DRS_FOGEND, *((LPDWORD)(&fEnd)));

	return S_OK;
}