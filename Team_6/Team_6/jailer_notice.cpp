//=============================================================================
//
// 看守の通報を受けた状態の処理 [jailer_notice.cpp]
// Author : Yamada Ryota
//
//=============================================================================

//=============================================================================
//インクルードファイル
//=============================================================================
#include "jailer_notice.h"
#include "jalier_ChaseState.h"
#include "jailer.h"
#include "jailer_view.h"

//=============================================================================
//静的メンバ変数宣言
//=============================================================================
CJailer_Notice* CJailer_Notice::m_pShingleton = nullptr;

//=============================================================================
//コンストラクタ
//=============================================================================
CJailer_Notice::CJailer_Notice()
{
}

//=============================================================================
//デストラクタ
//=============================================================================
CJailer_Notice::~CJailer_Notice()
{
}

//=============================================================================
//インスタンス取得
//=============================================================================
CJailer_Notice * CJailer_Notice::GetInstance(void)
{
	if (m_pShingleton == nullptr)
	{
		//インスタンス生成
		m_pShingleton = new CJailer_Notice;

		if (m_pShingleton)
		{
			return m_pShingleton;
		}
		else
		{
			return nullptr;
		}
	}

	return m_pShingleton;
}

//=============================================================================
//解放
//=============================================================================
void CJailer_Notice::Release(void)
{
	if (m_pShingleton)
	{
		//メモリの解放
		delete m_pShingleton;

		m_pShingleton = nullptr;
	}
}

//=============================================================================
//初期化処理
//=============================================================================
void CJailer_Notice::Init(CJailer * pJailer, CJailerView * pJailerView)
{
	pJailer->SetTime(0);
	//速さの設定
	pJailer->SetSpeed(6.0f);
}

//=============================================================================
//更新処理
//=============================================================================
void CJailer_Notice::Update(CJailer * pJailer, CJailerView * pJailerView)
{
	pJailer->Notice();

	//索敵範囲にがいる場合
	if (pJailerView->GetIsDetection() == true)
	{
		//追跡状態へ
		pJailer->ChangeState(CChaseState::GetInstance());
	}
}
